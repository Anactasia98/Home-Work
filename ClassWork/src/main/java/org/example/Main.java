package org.example;

import java.util.Scanner;

//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
public class Main {
    public static void main(String[] args) {
        Scanner scanner= new Scanner(System.in);
//Задания для самостоятельной работы (Java, средний уровень)
//1-2. Задания на if
//Задание 1: Классификация углов
//Напишите программу, которая запрашивает у пользователя угол в градусах (целое число от 0 до 360)
// и классифицирует его следующим образом:
//
//Острый угол (меньше 90 градусов)
//Прямой угол (ровно 90 градусов)
//Тупой угол (от 91 до 179 градусов)
//Развернутый угол (ровно 180 градусов)
//Невалидный угол (больше 180 градусов, но не более 360)
//Выведите соответствующее сообщение.
//Если введенное число выходит за пределы 0-360, программа должна выводить сообщение об ошибке.
//
        System.out.print("Введите угол в градусах : ");
        int gradus = scanner.nextInt();
        if (gradus<90 && gradus>0){
            System.out.println("Острый угол");
        } else if (gradus==90) {
            System.out.println("Прямой угол");
        } else if (gradus<=91 && gradus>=179) {
            System.out.println("Тупой угол");
        } else if (gradus==180) {
            System.out.println("Развернутый угол");
        } else if (gradus>180 && gradus<=360) {
            System.out.println("Невалидный угол");
        } else if (gradus<0 || gradus>360) {
            System.out.println("Тут должна быть ошибка try catch");
        }


//Задание 2: Оценка кредита
//Напишите программу, которая запрашивает у пользователя его возраст, ежемесячный доход и сумму кредита, который он хочет взять.
// Программа должна проверять следующие условия:
//
//Возраст должен быть от 18 до 65 лет.
//Доход должен быть не менее 50 000 рублей.
//Сумма кредита не должна превышать 10-кратный размер ежемесячного дохода.
//Если все условия выполняются, программа должна сообщить, что кредит одобрен.
//В противном случае программа должна объяснить причину отказа.
//
//3. Задание на switch
//Задание 3: Калькулятор простых операций
//Напишите консольную программу, которая запрашивает у пользователя два числа (целые) и оператор (+, -, *, /).
//Используйте switch для выполнения соответствующей арифметической операции.
//
//Обработайте следующие случаи:
//
//Деление на ноль (вывести сообщение об ошибке).
//Ввод некорректного оператора (вывести сообщение об ошибке).
//Корректный вывод результата.
//
//
//4-5. Задания на while
//Задание 4: Поиск числа Фибоначчи
//Пользователь вводит целое положительное число n. Программа должна вывести n-й элемент последовательности Фибоначчи, используя цикл while.
//(Последовательность: 0, 1, 1, 2, 3, 5, 8, 13, …)
//
//Задание 5: Проверка на палиндром
//Напишите программу, которая запрашивает у пользователя строку и проверяет, является ли она палиндромом (читается одинаково слева направо и справа налево). Используйте цикл while для проверки.
//
//Пример работы:
//
//Введите строку: level
//Это палиндром!
//
//Введите строку: hello
//Это не палиндром.
//
//
//6-7. Задания на ООП
//Задание 6: Банковский счет
//Создайте класс BankAccount, который содержит:
//
//Поля: balance (баланс), owner (владелец счета).
//Метод deposit(double amount), который увеличивает баланс.
//Метод withdraw(double amount), который уменьшает баланс, но не позволяет уйти в минус.
//Конструктор, который принимает начальный баланс и имя владельца.
//Напишите программу, которая создает объект BankAccount, выполняет несколько операций пополнения и снятия и выводит итоговый баланс.
//
//Задание 7: Управление заказами
//Создайте классы Product (товар) и Order (заказ).
//
//Product должен содержать поля: name (название), price (цена).
//Order должен содержать список товаров (List<Product>) и метод getTotalPrice(), который вычисляет общую стоимость заказа.
//Создайте несколько товаров, добавьте их в заказ, посчитайте итоговую сумму и выведите результат.
//
//8-9. Задания на Stream API
//Задание 8: Фильтрация чисел
//Дан список чисел List<Integer>. Используйте Stream API, чтобы:
//
//Оставить только четные числа.
//Упорядочить их по убыванию.
//Вывести их на экран.
//Пример входных данных: [5, 12, 7, 3, 14, 18, 6]
//Выход: [18, 14, 12, 6]
//
//Задание 9: Поиск самого длинного слова
//Дан список строк List<String>. Используйте Stream API, чтобы:
//
//Найти самое длинное слово.
//Если есть несколько слов одинаковой длины, выбрать первое.
//Вывести его на экран.
//Пример входных данных: ["кот", "слон", "крокодил", "тигр", "леопард"]
//Выход: "крокодил"
//
//10. Задание на IO File
//Задание 10: Чтение и обработка данных из файла
//Напишите программу, которая:
//
//Читает файл input.txt, содержащий числа (по одному числу в строке).
//Суммирует все числа из файла.
//Записывает результат в файл output.txt.
//Пример input.txt:
//
//10
//20
//30
//40
//Результат в output.txt:
//
//Сумма чисел: 100
//
//
//Дополнительно
//Все задания требуют обработки ошибок (например, если ввод некорректен) и должны быть решены
//без использования break и continue, если это не критично.
    }
}